spring.application.name=api-gateway
server.port=9000
spring.security.oauth2.resourceserver.jwt.issuer-uri=http://localhost:8181/realms/spring-microservices-security-realm
#http://localhost:8181/admin/master/console/#/spring-microservices-security-realm

#ACTUATOR ENDPOINTS :
management.health.circuitbreakers.enabled=true
management.endpoints.web. exposure.include=*
management.endpoint.health.show-details=always

#Resilinece4j Properties
resilience4j.circuitbreaker.configs.default.registerHealthIndicator=true
#below code : how to determine the criteria on which the circuit breaker works : count no of requests (count_base), if certain limit raised, stop the req
resilience4j.circuitbreaker.configs.default.slidingWindowType=COUNT_BASED
#10 req at a time
resilience4j.circuitbreaker.configs.default.slidingWindowSize=10
resilience4j.circuitbreaker.configs.default.failureRateThreshold=50
resilience4j.circuitbreaker.configs.default.waitDurationInOpenState=5s
resilience4j.circuitbreaker.configs.default.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.configs.default.automaticTransitionFromOpenToHalfOpenEnabled=true
#if 5 calls failes, circuit breaker opens
resilience4j.circuitbreaker.configs.default.minimum-number-of-calls=5

#Resilience4J Timeout Properties
resilience4j.timelimiter.configs.default.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.configs.default.max-attempts=3
#retry if the ext service is not responding for 2 s, if 3 attemps of retry -> open circuit breaker
resilience4j.retry.configs.default.wait-duration=2s

management.metrics.distribution.percentiles-histogram.http.server.requests=true
management.observations.key-values.application=api-gateway
management.tracing.sampling.probability=1.0